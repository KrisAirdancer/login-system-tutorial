/***** DEPENDENCIES *****/

const express = require('express')
// bcrypt is used to encrypt and decrypt data.
const bcrypt = require('bcrypt')
/* passport is being used to authenticate users.
 * Note that this login system also uses passport-local. passport-local allows
 * us to use passwords and usernames as login credentials. This is not available
 * in vanilla passport and is requried as an additional package. Both are
 * required to use passwords and usernames as login credentials.
 */
const passport = require('passport')
/* express-flash is being used to display messages to the user when they enter
 * the wrong credentials. This is used internally by passport and is not
 * necessary for this functionality, but makes it easier to serve the messages
 * to the user with a simple variable in the HTML for the login page, as opposed
 * to having to add additional JavaScript to handle this.
 * Note: One way to specify the messages that flash returns is by passing messages
 * into the .done() function. See passport-config.js for several examples.
 */
const flash = require('express-flash')
/* express-session is being used to store and persist users accross pages on the
 * site. That is, this allows us to identify a user on the web so they don't have
 * to log into every page they visit on the site. Login once and you have access
 * to all of the pages on that site.
 */
const session = require('express-session')
const methodOverride = require('method-override')
// dotenv allows us to use environment variables.
require('dotenv').config()

/***** SETTING UP PASSPORT *****/

// This makes the function .initialize in passport-config available for use in this file.
const initializePassport = require('./passport-config')

/* This calls the initialize function in the passport-config.js file
 * that sets up the passport "object" for use in this project.
 */
initializePassport(
  passport, // This is the passport object to be used for authentication.
  email => users.find(user => user.email === email), // This is the function being passed into passport-config.js as getUserByEmail
  id => users.find(user => user.id === id) // This is the function being passed into passport-config.js as getUserById
)

/***** SERVER SETUP *****/

// TODO: Replace the 'users' variable with a JSON file that stores the users. Hand code it. That is, the server shouldn't have logic to write to the JSON file (there will be no register page on this site), but will read from the JSON file on server startup and populate a variable like this one that is used to run the login system.
/* This is storing the users that register on the site. Note that the data in
 * this field is erased each time the server shuts down. Thus, this will need
 * to be replaced with a data store that persists, such as a JSON file or a 
 * database.
 */
const users = []

const app = express()

// Setting the view engine to EJS
app.set('view-engine', 'ejs')

/* This allows us to acces the data from HTML forms inside the request variables
 * (req) that are generated by POST, GET, etc. requsets. The request variables
 * (req) are the ones in the app.post(), app.get(), etc. calls. ex. req.body.email
 * will get the 'email' field from the body of the request variable which got the 
 * data in that field from the 'email' variable in the form that was submitted.
 * The 'email' in the form was the field with the email attribute of 'email'.
 */
app.use(express.urlencoded({ extended: false }))
// Telling our server to use express-flash
app.use(flash())
// Telling our server to use express-session
app.use(session({
  secret: process.env.SESSION_SECRET, // A key that is used by bcrypt to encrypt data. The key is used to encrypt data and then to decrypt the data. Anyone with the key can decrypt data that was encrypted using that key.
  resave: false, // This is asking, "Should we save our session variables if nothing has changed?" In this case, no.
  saveUninitialized: false // This is asking, "Do you want to save an empty value in the session if there is no value?" In this case, no.
}))

// This .initialize is NOT the same as .initialize() in passport-config.js. This simply sets up some of the passport stuff for us.
app.use(passport.initialize())
// This tells our server to persist users across sessions.
app.use(passport.session())
app.use(methodOverride('_method'))

/***** ROUTES *****/

/* Serves the homepage, index.html.
 * checkAuthenticated is a function that we defined below that checks if a user has already
 * been authenticated or not. If they haven't, checkAuthenticated redirects them. Thereby
 * cutting this request off and preventing them from accessing the page they requested.
 * This is how you put pages behind a login and prevent users from accessing them directly
 * without first logging in. If  they haven't logged in and they go dircectly to the page
 * via a URL (or however), they will be redirected to the page specified by the 
 * checkAuthenticated function. In this case, they are redirected to the login page.
 */
app.get('/', checkAuthenticated, (req, res) => {
  res.render('index.ejs', { name: req.user.name }) // Passes the name property from the user object to the rendered html (.ejs) file.
})

/*Serves the login page, login.ejs.
 */
app.get('/login', checkNotAuthenticated, (req, res) => {
  res.render('login.ejs')
})

/* Handles the POST request from the form on the login.ejs page.
 * passport.authenticate(): This method is authenticating the user when
 * the request is made. 
 * - We are using the 'local' strategy.
 * - successRedirect specifies the route to redirect the user to if they are successfully authenticated.
 * - failureRedirect specifies the route to recirect the user to if they are NOT successfully authenticated.
 * - failureFlash allows us to display the messages that are passed to done() in passport-config.js.
 */
app.post('/login', checkNotAuthenticated, passport.authenticate('local', {
  successRedirect: '/',
  failureRedirect: '/login',
  failureFlash: true
}))

// TODO: Remove this code. It is associated with the Register page which we are not going to incorporate in to GRB.
/* Serves the Register page, register.ejs.
 */
app.get('/register', checkNotAuthenticated, (req, res) => {
  res.render('register.ejs')
})

// TODO: Remove this code. It is associated with the Register page which we are not going to incorporate in to GRB.
/* Handles the POST request sent from the form on the register.ejs page.
 */
app.post('/register', checkNotAuthenticated, async (req, res) => {
  try {
    // Encrypt the password the registering user specifies.
    const hashedPassword = await bcrypt.hash(req.body.password, 10) // The '10' determines how many hashing cyles the data will go through. More == greater security but it is slower.
    users.push({
      id: Date.now().toString(), // We are using the date and time of registry to generate a unique ID for the user. An integer ID is usually generated by a database for this, but we aren't storing our data in a database, so we need a stand in and this is an easy way to do it.
      // The next two lines pull data from the submitted form (this data was sent from the form as an object in the request (req) object).
      name: req.body.name,
      email: req.body.email,
      password: hashedPassword
    })
    // Redirect the newly registered user to the login page.
    res.redirect('/login')
  } catch {
    // If there is a failure, we route the registering user back to the register page (we re-serve the register page).
    res.redirect('/register')
  }
})

/*
 */
app.delete('/logout', (req, res) => {
  req.logOut()
  res.redirect('/login')
})

/* Checks if a user has been authenticated or not.
 * This function allows us to check if a user has been authenticated wherever
 * we want to. Such as when .get() and .post() requests are made to the server.
 * The `next` function is a function we call when we have finished
 * authenticating the user that simply tells the calling function to continue.
 * In this case, if the user hasn't been authenticated, and passport.isAuthenticated()
 * returns false, we redirect the user back to the login page instaed of allowing
 * them to go to the page they requested.
 */
function checkAuthenticated(req, res, next) {
  // .isAuthenicated() is a passport function that returns true if a user has been authenticated.
  if (req.isAuthenticated()) {
    return next()
  }
  // Redirect the user to the login page. This only triggers if the user hasn't been authenticated.
  res.redirect('/login')
}

/*
 */
function checkNotAuthenticated(req, res, next) {
  if (req.isAuthenticated()) {
    return res.redirect('/')
  }
  next()
}

// Start the server listening on port 3000
app.listen(3000)
console.log('Server listening on port 3000')